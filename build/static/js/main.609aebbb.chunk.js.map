{"version":3,"sources":["routes.js","App.js","serviceWorker.js","index.js"],"names":["Loading","react_default","a","createElement","sidebar","Loadable","loader","Promise","all","__webpack_require__","e","then","bind","loading","carrinho","Tutorial","Loja","Routes","BrowserRouter","Switch","Route","exact","path","component","App","routes","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sRAIMA,EAAU,kBAAMC,EAAAC,EAAAC,cAAA,aAEhBC,EAAUC,IAAS,CACrBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAGPc,EAAWT,IAAS,CACtBC,OAAQ,kBAAMG,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAGPe,EAAWV,IAAS,CACtBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAGPgB,EAAOX,IAAS,CAClBC,OAAQ,kBAAMC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,KAAAC,KAAAF,EAAAG,KAAA,YACdC,QAASb,IAcEiB,EAXA,kBACXhB,EAAAC,EAAAC,cAACe,EAAA,EAAD,KACIjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACIlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,IAAKC,UAAWR,IACnCd,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,WAAYC,UAAWnB,IAC1CH,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,YAAaC,UAAWT,IAC3Cb,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAM,QAASC,UAAWP,OCpBpCQ,0LAJP,OAAQvB,EAAAC,EAAAC,cAACsB,EAAD,aAHEC,cCGEC,QAAqC,cAA7BC,OAAOC,SAASC,UAEf,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCN/BC,IAASC,OACLhC,EAAAC,EAAAC,cAAC+B,EAAD,MAAQC,SAASC,eAAe,SD6G5B,kBAAmBC,WACnBA,UACKC,cACAC,MACA5B,KAAK,SAAA6B,GACFA,EAAaC","file":"static/js/main.609aebbb.chunk.js","sourcesContent":["import React from 'react';\r\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\r\nimport Loadable from 'react-loadable';\r\n\r\nconst Loading = () => <div></div>;\r\n\r\nconst sidebar = Loadable({\r\n    loader: () => import ('./routes/sidebar/index.js'),\r\n    loading: Loading\r\n});\r\n\r\nconst carrinho = Loadable({\r\n    loader: () => import ('./routes/carrinho/index.js'),\r\n    loading: Loading\r\n});\r\n\r\nconst Tutorial = Loadable({\r\n    loader: () => import ('./routes/tutorial/index.js'),\r\n    loading: Loading\r\n});\r\n\r\nconst Loja = Loadable({\r\n    loader: () => import ('./routes/loja/index.js'),\r\n    loading: Loading\r\n});\r\n\r\nconst Routes = () => (\r\n    <Router>\r\n        <Switch>\r\n            <Route exact path={\"/\"} component={Tutorial}/>\r\n            <Route exact path={\"/sidebar\"} component={sidebar}/>\r\n            <Route exact path={\"/carrinho\"} component={carrinho}/>\r\n            <Route exact path={\"/Loja\"} component={Loja}/>\r\n        </Switch>\r\n    </Router>\r\n);\r\n\r\nexport default Routes;","import React, {Component} from 'react';\r\nimport Routes from './routes.js'\r\nimport './styles/App.scss';\r\nimport ReactDOM from 'react-dom'\r\n\r\nclass App extends Component {\r\n\r\n    render() {\r\n        return (<Routes/>);\r\n    }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background. To learn more about the\n// benefits of this model, read https://goo.gl/KwvDNy. This link also includes\n// instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin from\n            // what our page is served on. This might happen if a CDN is used to serve\n            // assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or\n                // not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the service\n                // worker/PWA documentation.\n                navigator\n                    .serviceWorker\n                    .ready\n                    .then(() => {\n                        console.log('This web app is being served cache-first by a service worker. To learn more, vis' +\n                                'it https://goo.gl/SC7cgQ');\n                    });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator\n        .serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and the fresh content\n                            // will have been added to the cache. It's the perfect time to display a \"New\n                            // content is available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n\n                            // Execute callback\n                            if (config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached. It's the perfect time to\n                            // display a \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl).then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator\n                .serviceWorker\n                .ready\n                .then(registration => {\n                    registration\n                        .unregister()\n                        .then(() => {\n                            window\n                                .location\n                                .reload();\n                        });\n                });\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    }).catch(() => {\n        console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator\n            .serviceWorker\n            .ready\n            .then(registration => {\n                registration.unregister();\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls. Learn\n// more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}